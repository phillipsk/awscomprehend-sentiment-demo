AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless application that leverages Amazon Comprehend, Transcribe,
  ElasticSearch and Step Functions to index podcast episodes.
Globals:
  Function:
    Environment:
      Variables:
        DEBUG_MODE: false
        ES_EPISODE_INDEX: episodes
    Runtime: python2.7
    Timeout: 180
Outputs:
  KibanaPassword:
    Description: The password for the kibana user
    Value:
      Fn::GetAtt:
      - ESCognito
      - KibanaPassword
  KibanaUrl:
    Description: A hyperlink to the Kibana tool
    Value:
      Fn::Sub: https://${ESDomain.DomainEndpoint}/_plugin/kibana/
  KibanaUser:
    Description: The username for the kibana user
    Value:
      Fn::GetAtt:
      - ESCognito
      - KibanaUser
  RssStateMachineUrl:
    Description: A hyperlink to the Step Function Console
    Value:
      Fn::Sub: https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${RssStateMachine}
Parameters:
  AudioOffset:
    AllowedValues:
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
    Default: '1'
    Description: The number of seconds before the keyword that the audio clip will
      start when hyperlinked.
    Type: String
  kibanaUser:
    Default: kibana
    Description: The name of the user that is used to log into kibana.
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
  CfnLambdaRolePolicy:
    Properties:
      Description: lambda role
      PolicyDocument:
        Statement:
        - Action:
          - iam:PassRole
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - CognitoAccessForAmazonES
            - Arn
        - Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:CreateUserPoolDomain
          - cognito-idp:DeleteUserPoolDomain
          Effect: Allow
          Resource:
          - '*'
        - Action:
          - es:*
          Effect: Allow
          Resource:
          - '*'
        - Action:
          - states:DescribeExecution
          - states:StartExecution
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${CfnStepFunction.Name}:*
          - Ref: CfnStepFunction
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      Roles:
      - Ref: CfnLambdaServiceRole
    Type: AWS::IAM::ManagedPolicy
  CfnLambdaServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CfnStepFunction:
    DependsOn:
    - checkElasticsearchStatus
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"checkAction\",\n  \"States\": {\n    \"checkAction\"\
          : { \n        \"Type\": \"Task\",\n        \"Resource\": \"${checkElasticsearchStatus.Arn}\"\
          ,\n        \"InputPath\": \"$\",\n        \"ResultPath\": \"$\",\n     \
          \   \"Next\": \"IsActionComplete\"\n    },\n    \"IsActionComplete\": {\n\
          \     \"Type\": \"Choice\",\n                  \"Choices\": [\n        \
          \            {\n                      \"Variable\": \"$.response.Status\"\
          ,\n                      \"StringEquals\": \"IN_PROCESS\",\n           \
          \           \"Next\": \"Wait\"\n                    }\n                \
          \  ],\n                  \"Default\": \"Complete\"\n     },\n    \"Wait\"\
          : {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\":\
          \ \"checkAction\"\n    },\n    \"Complete\": { \n      \"Type\": \"Pass\"\
          ,\n      \"End\": true\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  CognitoAccessForAmazonES:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: es.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonESCognitoAccess
    Type: AWS::IAM::Role
  CognitoAccessForAmazonESPolicy:
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
        - Action:
          - iam:GetRole
          - iam:PassRole
          - iam:CreateRole
          - iam:AttachRolePolicy
          - ec2:DescribeVpcs
          - cognito-identity:ListIdentityPools
          - cognito-identity:DescribeIdentityPool
          - cognito-idp:ListUserPools
          - cognito-idp:DescribeUserPool
          - cognito-idp:CreateUserPoolDomain
          - cognito-idp:DeleteUserPoolDomain
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      Roles:
      - Ref: CognitoAccessForAmazonES
    Type: AWS::IAM::ManagedPolicy
  CognitoApplicationClient:
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-appclient
      GenerateSecret: false
      RefreshTokenValidity: 2
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  CognitoAuthKibanaPolicy:
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
        - Action:
          - es:ESHttp*
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      Roles:
      - Ref: CognitoAuthRole
    Type: AWS::IAM::ManagedPolicy
  CognitoAuthRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CognitoIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoApplicationClient
        ProviderName:
          Fn::Sub: cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
        ServerSideTokenCheck: false
    Type: AWS::Cognito::IdentityPool
  CognitoIdentityPoolRole:
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnauthRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  CognitoUnauthRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CognitoUserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Welcome to the Podcast Indexer. Username: {username} Pwd:
            {####}'
          EmailSubject: Welcome to Podcast Indexer.
          SMSMessage: 'Welcome to Podcast Indexer. Username: {username} Pwd: {####}'
        UnusedAccountValidityDays: 14
      AliasAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      EmailVerificationMessage: 'Welcome to the Podcast Indexer. Here is your confirmation
        code: {####}'
      EmailVerificationSubject: Podcast Indexer Email Confirmation Code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-users
    Type: AWS::Cognito::UserPool
  ESCognito:
    DependsOn:
    - CfnStepFunction
    - elasticsearchCognito
    - checkElasticsearchStatus
    - CfnLambdaRolePolicy
    - CognitoAuthKibanaPolicy
    - CognitoAccessForAmazonESPolicy
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      ServiceToken:
        Fn::GetAtt:
        - elasticsearchCognito
        - Arn
      StackName:
        Ref: AWS::StackName
      UserPoolId:
        Ref: CognitoUserPool
      esCluster:
        Ref: ESDomain
      esRoleArn:
        Fn::GetAtt:
        - CognitoAccessForAmazonES
        - Arn
      kibanaUser:
        Ref: kibanaUser
    Type: Custom::ESName
  ESDomain:
    Properties:
      AdvancedOptions:
        indices.fielddata.cache.size: ''
        rest.action.multi.allow_explicit_index: 'true'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t2.small.elasticsearch
        ZoneAwarenessEnabled: false
      ElasticsearchVersion: '6.2'
    Type: AWS::Elasticsearch::Domain
  EpisodeStateMachine:
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"Is Dryrun?\",\n  \"States\": {\n    \"Is Dryrun?\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n    \
          \      \"Variable\": \"$.dryrun\",\n          \"StringEquals\": \"TRUE\"\
          ,\n          \"Next\": \"Complete\"\n        }\n      ],\n      \"Default\"\
          : \"Download Podcast\"\n    },\n    \"Download Podcast\": {\n      \"Type\"\
          : \"Task\",\n      \"Resource\": \"${downloadPodcast.Arn}\",\n      \"ResultPath\"\
          : \"$.audioS3Location\",\n      \"Next\": \"Start Amazon Transcribe\"\n\
          \    },\n    \"Start Amazon Transcribe\": {\n      \"Type\": \"Task\",\n\
          \      \"Resource\": \"${podcastTranscribe.Arn}\",\n      \"InputPath\"\
          : \"$\",\n      \"ResultPath\": \"$.transcribe\",\n      \"Next\": \"Check\
          \ Transcribe Status\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\"\
          : [ \"ThrottlingException\" ],\n          \"IntervalSeconds\": 120,\n  \
          \        \"BackoffRate\": 2,\n          \"MaxAttempts\": 5\n        },\n\
          \        {\n          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"\
          IntervalSeconds\": 60,\n          \"BackoffRate\": 2,\n          \"MaxAttempts\"\
          : 3\n        }\n      ]\n    },\n    \"Check Transcribe Status\": {\n  \
          \    \"Type\": \"Task\",\n      \"Resource\": \"${checkTranscribe.Arn}\"\
          ,\n      \"InputPath\": \"$.transcribe\",\n      \"ResultPath\": \"$.transcribeStatus\"\
          ,\n      \"Next\": \"Is Transcribe Completed?\"\n    },\n    \"Wait for\
          \ Transcribe Completion\": {\n      \"Type\": \"Wait\",\n      \"Seconds\"\
          : 60,\n      \"Next\": \"Check Transcribe Status\"\n    },\n    \"Is Transcribe\
          \ Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n \
          \       {\n          \"Variable\": \"$.transcribeStatus.status\",\n    \
          \      \"StringEquals\": \"COMPLETED\",\n          \"Next\": \"Process Transcription\"\
          \n        }\n      ],\n      \"Default\": \"Wait for Transcribe Completion\"\
          \n    },\n    \"Process Transcription\": {\n      \"Type\": \"Parallel\"\
          ,\n      \"Branches\": [\n        {\n          \"StartAt\": \"Process Transcript\
          \ By Paragraph\",\n          \"States\": {\n            \"Process Transcript\
          \ By Paragraph\": {\n              \"Type\": \"Task\",\n              \"\
          Resource\": \"${processTranscriptionParagraph.Arn}\",\n              \"\
          End\": true\n            }\n          }\n        },\n        {\n       \
          \   \"StartAt\": \"Generate Full Text Transcript\",\n          \"States\"\
          : {\n            \"Generate Full Text Transcript\": {\n              \"\
          Type\": \"Task\",\n              \"Resource\": \"${processTranscriptionFullText.Arn}\"\
          ,\n              \"End\": true\n            }\n          }\n        }\n\
          \      ],\n      \"ResultPath\": \"$.processedTranscription\",\n      \"\
          Next\": \"Upload To Elasticsearch\"\n    },\n    \"Upload To Elasticsearch\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${uploadToElasticsearch.Arn}\"\
          ,\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.elasticsearchResult\"\
          ,\n      \"Next\": \"Complete\"\n    },\n    \"Complete\": {\n      \"Type\"\
          : \"Succeed\"\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  LambdaRolePolicy:
    Properties:
      Description: lambda role
      PolicyDocument:
        Statement:
        - Action:
          - s3:*
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:s3:::${Bucket}/podcasts/*
          - Fn::Sub: arn:aws:s3:::${Bucket}
        - Action:
          - es:ESHttpGet
          - es:ESHttpPost
          - es:ESHttpPut
          - es:ESHttpHead
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}/*
          - Fn::Sub: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}
        - Action:
          - transcribe:GetTranscriptionJob
          - transcribe:StartTranscriptionJob
          - transcribe:CreateVocabulary
          - transcribe:DeleteVocabulary
          - transcribe:ListVocabularies
          - transcribe:GetVocabulary
          - comprehend:DetectEntities
          - comprehend:DetectKeyPhrases
          - comprehend:BatchDetectEntities
          - comprehend:*
          Effect: Allow
          Resource: '*'
        - Action:
          - states:DescribeExecution
          - states:StartExecution
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${EpisodeStateMachine.Name}:*
          - Ref: EpisodeStateMachine
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      Roles:
      - Ref: LambdaServiceRole
    Type: AWS::IAM::ManagedPolicy
  LambdaServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  RssStateMachine:
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"Process Podcast Rss\",\n  \"States\": {\n  \
          \  \"Process Podcast Rss\": {\n      \"Type\": \"Task\",\n      \"Resource\"\
          : \"${processPodcastRss.Arn}\",\n      \"Next\": \"Create Custom Vocabulary\
          \ For Amazon Transcribe\",\n      \"ResultPath\": \"$\"\n    },\n    \"\
          Create Custom Vocabulary For Amazon Transcribe\": {\n      \"Type\": \"\
          Task\",\n      \"Resource\": \"${createTranscribeVocabulary.Arn}\",\n  \
          \    \"Next\": \"Is Vocabulary Completed?\",\n      \"ResultPath\": \"$.vocabularyInfo\"\
          \n    },\n    \"Is Vocabulary Completed?\": {\n      \"Type\": \"Choice\"\
          ,\n      \"Choices\": [\n        {\n          \"Variable\": \"$.vocabularyInfo.status\"\
          ,\n          \"StringEquals\": \"READY\",\n          \"Next\": \"Create\
          \ Elasticsearch Index Mapping\"\n        }\n      ],\n      \"Default\"\
          : \"Wait For Vocabulary Creation\"\n    },\n    \"Wait For Vocabulary Creation\"\
          : {\n      \"Type\": \"Wait\",\n      \"Seconds\": 5,\n      \"Next\": \"\
          Check Vocabulary Status\"\n    },\n    \"Check Vocabulary Status\": {\n\
          \      \"Type\": \"Task\",\n      \"Resource\": \"${monitorTranscribeVocabulary.Arn}\"\
          ,\n      \"Next\": \"Is Vocabulary Completed?\",\n      \"InputPath\": \"\
          $.vocabularyInfo\",\n      \"ResultPath\": \"$.vocabularyInfo\"\n    },\n\
          \    \"Create Elasticsearch Index Mapping\" : {\n      \"Type\": \"Task\"\
          ,\n      \"Resource\": \"${createElasticsearchIndex.Arn}\",\n      \"Next\"\
          : \"Process Podcast Episodes\",\n      \"InputPath\": null,\n      \"ResultPath\"\
          : null\n    },\n    \"Process Podcast Episodes\": {\n      \"Type\": \"\
          Task\",\n      \"Resource\": \"${processPodcastItem.Arn}\",\n      \"Next\"\
          : \"Are all Episodes Processed?\",\n      \"ResultPath\": \"$.episodes\"\
          \n    },\n    \"Are all Episodes Processed?\": {\n      \"Type\": \"Choice\"\
          ,\n      \"Choices\": [\n        {\n          \"Variable\": \"$.episodes.status\"\
          ,\n          \"StringEquals\": \"COMPLETE\",\n          \"Next\": \"Delete\
          \ Amazon Transcribe Custom Vocabulary\"\n        }\n      ],\n      \"Default\"\
          : \"Wait 30 Seconds\"\n    },\n    \"Wait 30 Seconds\": {\n      \"Type\"\
          : \"Wait\",\n      \"Seconds\": 30,\n      \"Next\": \"Process Podcast Episodes\"\
          \n    },\n    \"Delete Amazon Transcribe Custom Vocabulary\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"${deleteTranscribeVocabulary.Arn}\"\
          ,\n      \"InputPath\": \"$.vocabularyInfo\",\n      \"ResultPath\": \"\
          $.vocabularyInfo\",\n      \"End\": true\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  StatesExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: StatesExecutionPolicy
    Type: AWS::IAM::Role
  checkElasticsearchStatus:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Handler: elasticsearch-cognito.check_status
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - CfnLambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 15
    Type: AWS::Serverless::Function
  checkTranscribe:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Handler: check_transcribe.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 15
    Type: AWS::Serverless::Function
  createElasticsearchIndex:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          ES_DOMAIN:
            Fn::GetAtt:
            - ESDomain
            - DomainEndpoint
      Handler: elasticsearch_createindex.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60
    Type: AWS::Serverless::Function
  createTranscribeVocabulary:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
      Handler: create_transcribe_vocabulary.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  deleteTranscribeVocabulary:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Handler: create_transcribe_vocabulary.delete_vocabulary
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  downloadPodcast:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: This function downloads the podcast from the supplied url and uploads
        it to S3
      Handler: download_podcast.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  elasticsearchCognito:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          STEP_FUNCTION_ARN:
            Ref: CfnStepFunction
      Handler: elasticsearch-cognito.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - CfnLambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 240
    Type: AWS::Serverless::Function
  monitorTranscribeVocabulary:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Handler: create_transcribe_vocabulary.check_vocabulary_status
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  podcastTranscribe:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Handler: podcast_transcribe.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 15
    Type: AWS::Serverless::Function
  processPodcastItem:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
          DRY_RUN: 'TRUE'
          STEP_FUNCTION_ARN:
            Ref: EpisodeStateMachine
      Handler: process_podcast_item.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  processPodcastRss:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
      Handler: process_podcast_rss.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Serverless::Function
  processTranscriptionFullText:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
      Handler: process_transcription_full_text.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 150
    Type: AWS::Serverless::Function
  processTranscriptionParagraph:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: Bucket
      Handler: process_transcription_paragraph.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 150
    Type: AWS::Serverless::Function
  uploadToElasticsearch:
    Properties:
      CodeUri: s3://aws-machine-learning-blog/artifacts/discovering-podcasts/d2ea360ff367bba8969bd5fcfbb18e65
      Description: ''
      Environment:
        Variables:
          AUDIO_OFFSET:
            Ref: AudioOffset
          ES_DOMAIN:
            Fn::GetAtt:
            - ESDomain
            - DomainEndpoint
      Handler: upload_to_elasticsearch.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
